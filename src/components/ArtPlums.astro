<div class="pointer-events-none fixed inset-0 z-[-1] print:hidden">
  <canvas id="softLatticeCanvas"></canvas>
</div>

<script>
  const canvas = document.getElementById("softLatticeCanvas") as HTMLCanvasElement;
  const ctx = canvas.getContext("2d");

  const POINTS = 60;
  const MAX_DIST = 120;
  let width: number, height: number;
  let points: any[] = [];

  let hue = 0;

  function resizeCanvas() {
    width = canvas.width = window.innerWidth;
    height = canvas.height = window.innerHeight;
    generatePoints();
  }

  function generatePoints() {
    points = [];
    for (let i = 0; i < POINTS; i++) {
      points.push({
        x: Math.random() * width,
        y: Math.random() * height,
        vx: (Math.random() - 0.5) * 0.3,
        vy: (Math.random() - 0.5) * 0.3,
      });
    }
  }

  function draw() {
    if (!ctx) return;
    ctx.clearRect(0, 0, width, height);

    hue = (hue + 0.2) % 360;
    const baseColor = `hsl(${hue}, 20%, 50%)`;

    for (let i = 0; i < points.length; i++) {
      const p1 = points[i];
      p1.x += p1.vx;
      p1.y += p1.vy;

      if (p1.x < 0 || p1.x > width) p1.vx *= -1;
      if (p1.y < 0 || p1.y > height) p1.vy *= -1;

      // Draw point
      ctx.beginPath();
      ctx.arc(p1.x, p1.y, 1.5, 0, Math.PI * 2);
      ctx.fillStyle = baseColor;
      ctx.fill();

      // Connect lines
      for (let j = i + 1; j < points.length; j++) {
        const p2 = points[j];
        const dx = p1.x - p2.x;
        const dy = p1.y - p2.y;
        const dist = Math.sqrt(dx * dx + dy * dy);
        if (dist < MAX_DIST) {
          const alpha = 1 - dist / MAX_DIST;
          ctx.beginPath();
          ctx.moveTo(p1.x, p1.y);
          ctx.lineTo(p2.x, p2.y);
          ctx.strokeStyle = `hsla(${hue}, 20%, 50%, ${alpha * 0.7})`;
          ctx.lineWidth = 0.5;
          ctx.stroke();
        }
      }
    }

    requestAnimationFrame(draw);
  }

  window.addEventListener("resize", resizeCanvas);
  resizeCanvas();
  draw();
</script>
